/*
See the LICENSE.txt file for this sampleâ€™s licensing information.

Abstract:
An actor that provides a SwiftData model container for the whole app and widget,
 and implements actor-isolated tasks like SwiftData history processing.
*/

//Source: sample project downloaded [here](https://developer.apple.com/documentation/coredata/adopting_swiftdata_for_a_core_data_app)

import SwiftUI
import SwiftData

//actor DataModel {
//    struct TransactionAuthor {
//        static let widget = "widget"
//    }
//
//    static let shared = DataModel()
//    private init() {}
//    
//    nonisolated lazy var modelContainer: ModelContainer = {
//        let modelContainer: ModelContainer
//        do {
//            modelContainer = try ModelContainer(for: Item.self)
//        } catch {
//            fatalError("Failed to create the model container: \(error)")
//        }
//        return modelContainer
//    }()
//}

// See in `AppIntent.swift` on why this approach is needed.
@ModelActor
actor DataModel {

    static let shared = DataModel()

    private init() {
        do {
            let modelContainer = try ModelContainer(for: Item.self)

            // 'init(modelContainer:)` is an initialiser generated by the @ModelActor macro
            self.init(modelContainer: modelContainer)
        } catch {
            fatalError("Failed to create the model container: \(error)")
        }
    }

    func run<Result: Sendable>(block: @Sendable (isolated DataModel) async throws -> Result) async rethrows -> Result {
        try await block(self)
    }
}
